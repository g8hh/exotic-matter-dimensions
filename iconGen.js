"use strict";
const classes = {
	sup:x=>"<sup>"+x+"</sup>",
	sub:x=>"<sub>"+x+"</sub>",
	xscript:(t,d)=>"<span class=\"xscript\"><sup>"+t+"</sup><sub>"+d+"</sub></span>",
	xscript:(t,d)=>"<span class=\"xscript\"><sup>"+t+"</sup><sub>"+d+"</sub></span>",
}
for (let i of ["exoticmatter","time","achievements","mastery","stardust","stars","darkmatter","energy","wormhole","wormhole_noGlow","research","galaxies","galaxyboosts","galaxypenalties","luck","prismatic","antimatter","binding"]) {classes[i] = function(str){return "<span class=\"_"+i+"\">"+str+"</span>"}}
const icon = {
	arr:"→",
	arrl:"←",
	arrd:"↓",
	arru:"↑",
	br:"<br>",
	plus:classes.sup("+"),
	minus:classes.sup("-"),
	inv:classes.sup("-1"),
	normalaxis:classes.exoticmatter("A"),
	exoticmatter:classes.exoticmatter("EM"),
	...Object.fromEntries(axisCodes.map(x=>[x+"Axis",classes.exoticmatter(x)])),
	time:classes.time("t"),
	tickspeed:classes.time("Δt"),
	achievements:classes.achievements("A"),
	mastery:function(x=""){return classes.mastery("M"+classes.sub(x))},
	masteryPower:classes.mastery("MP"),
	stardust:classes.stardust("S"),
	star:function(x=""){return classes.stars("★"+classes.sub(x))},
	darkaxis:classes.darkmatter("A"),
	...Object.fromEntries(axisCodes.map(x=>["dark"+x+"Axis",classes.darkmatter(x)])),
	darkstar:classes.darkmatter("★"),
	darkmatter:classes.darkmatter("DM"),
	energy:classes.energy("E"),
	energynum:x=>classes.energy("E<sub>"+x+"</sub>"),
	row4energy:x=>classes.energy("E")+classes.xscript("+",classes.energy(x)),
	hr:classes.wormhole("HR"),
	research:classes.research("R"),
	knowledge:classes.research("K"),
	discovery:classes.research("D"),
	study:arr=>arr.map(x=>"<div class=\"studyDot\" style=\"height:"+x[2]+"px;width:"+x[2]+"px;left:calc("+x[0]+"% - "+(x[2]/2)+"px);top:calc("+x[1]+"% - "+(x[2]/2)+"px)\"></div>").join(""),
	chroma:x=>("<span class=\""+lightNames[x]+"\">C</span>"),
	lumen:x=>("<span class=\""+lightNames[x]+"\">L</span>"),
	galaxy:classes.galaxies("G"),
	luckShard:classes.luck("S"),
	prismatic:classes.prismatic("P"),
	antimatter:classes.antimatter("AM"),
	antiaxis:classes.darkmatter("A"),
	...Object.fromEntries(axisCodes.map(x=>["anti"+x+"Axis",classes.antimatter(x)])),
	binding:classes.binding("B"),
}